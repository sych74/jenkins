type: install
id: jenkins
baseUrl: https://raw.githubusercontent.com/SiryjVyiko/jenkins/master
logo: /images/jenkins.png
name: Jenkins DevOps Pack
categories:
  - apps/dev-tools
  - apps/popular
  - apps/dev-and-admin-tools
homepage: https://jenkins.io/
description: /text/description.md

globals: 
  user: jelastic${fn.random(1000)}
  password: ${fn.password}
  tomcat: 9.0.12-jdk-10.0.2
  javaengine: jdk-10.0.2
  jenkins: 2.150.2
  
nodes:
  - cloudlets: 8
    nodeType: tomcat
    displayName: Master 
    tag: ${globals.tomcat}

  - cloudlets: 8
    nodeType: javaengine
    nodeGroup: slaves
    displayName: Build nodes
    tag: ${globals.javaengine} 
    count: ${settings.nodes}
    scalingMode: stateless
    diskLimit: 20G

skipNodeEmails: true

onBeforeInit: |
  return {
    result : 0,
    ssl:!!jelastic.billing.account.GetQuotas('environment.jelasticssl.enabled').array[0].value,
    settings : {
      "fields": [ {
        "type": "spinner",
        "name": "nodes",
        "caption": "Number of builders",
        "min": 1,
        "max": 10,
        "default": 2
      }]
    }
  }

onInstall: 
  - deploy:
      name: jenkins-${globals.jenkins}.war
      context: ROOT
      archive: http://mirrors.jenkins-ci.org/war-stable/${globals.jenkins}/jenkins.war
  - setupMaster
  - setNodeDisplayName[cp]: Jenkins
  - setNodeDisplayName[slaves]: Builder
  - readPublicKeyFromMaster
  - forEach(slave:nodes.slaves):
    - initSlave:
        slaveNodeId: ${@slave.id}
        slaveNodeIp: ${@slave.intIP}
          
onAfterScaleOut[slaves]:
  - setNodeDisplayName[slaves]: Builder
  - forEach(slave:event.response.nodes):
    - initSlave:
        slaveNodeId: ${@slave.id}
        slaveNodeIp: ${@slave.intIP}
          
onBeforeScaleIn[slaves]:
  - forEach(slave:event.response.nodes):
    - removeSlave:
        slaveNodeId: ${@slave.id}

actions:
   setupMaster:
    - cmd [cp]: |-
        yum -y install xmlstarlet;
      user: root
    - cmd[cp]: |-
        while [[ $(curl -s -w "%{http_code}" http://localhost:8080/ -o /dev/null) != "403" ]]; do echo "."; sleep 2; done
        pswd=$(cat ~/.jenkins/secrets/initialAdminPassword)
        jar=${STACK_PATH}/webapps/ROOT/WEB-INF/jenkins-cli.jar
        cmd="java -jar $jar -auth admin:$pswd -s http://localhost:8080/"
        until $(echo 'jenkins.model.Jenkins.instance.securityRealm.createAccount("${globals.user}", "${globals.password}")' | $cmd groovy =); do echo "repeat..."; sleep 2; done
        printf "<?xml version='1.1' encoding='UTF-8'?>\n<jenkins.model.JenkinsLocationConfiguration>\n\t<adminAddress>${user.email}</adminAddress>\n\t<jenkinsUrl>${env.protocol}://${env.domain}/</jenkinsUrl>\n</jenkins.model.JenkinsLocationConfiguration>" > ~/.jenkins/jenkins.model.JenkinsLocationConfiguration.xml
        wget ${baseUrl}/conf/plugins.txt -O plugins.txt
        while read p; do names="${p%% *} $names"; done < plugins.txt;
        $cmd install-plugin $names;
        sed -i 's|>NEW<|>RUNNING<|g' ~/.jenkins/config.xml
        sudo service tomcat restart
        while [[ $(curl -s -w "%{http_code}" http://localhost:8080/ -o /dev/null) != "403" ]]; do echo "."; sleep 2; done
        echo -e "\n"|ssh-keygen -t rsa -N ""
        wget ${baseUrl}/conf/credentials.xml -O credentials.xml
        xmlstarlet ed --inplace -u "com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey/privateKeySource/privateKey" -v "$(cat .ssh/id_rsa)" credentials.xml 2>/dev/null;
        cat credentials.xml | java -jar $jar -s http://localhost -auth admin:$pswd create-credentials-by-xml "SystemCredentialsProvider::SystemContextResolver::jenkins" "(global)"
        rm -f credentials.xml
   
   readPublicKeyFromMaster:
    - script: |
        return jelastic.env.file.Read('${env.envName}', session, '/opt/tomcat/temp/.ssh/id_rsa.pub', null, null, ${nodes.cp.master.id});
    - setGlobals:
        publicKey: ${response.body}
        
   initSlave:
    - cmd[${this.slaveNodeId}]: |-
        iptables -I INPUT -p tcp -s ${nodes.cp.master.intIP} --dport 22 -j ACCEPT;
      user: root
    - cmd[${this.slaveNodeId}]: |-
        echo "${globals.publicKey}" >> /home/jelastic/.ssh/authorized_keys;
    - cmd[${nodes.cp.master.id}]: |-
        ssh-keyscan -H ${this.slaveNodeIp} >> ~/.ssh/known_hosts
    - cmd[${nodes.cp.master.id}]: |-
        pswd=$(cat ~/.jenkins/secrets/initialAdminPassword)
        jar=${STACK_PATH}/webapps/ROOT/WEB-INF/jenkins-cli.jar
        wget ${baseUrl}/conf/worker.xml -O worker.xml
        xmlstarlet ed --inplace -u "slave/name" -v "node${this.slaveNodeId}" worker.xml 2>/dev/null;
        xmlstarlet ed --inplace -u "slave/launcher/host" -v "${this.slaveNodeIp}" worker.xml 2>/dev/null;
        xmlstarlet ed --inplace -u "slave/label" -v "node${this.slaveNodeId}" worker.xml 2>/dev/null;
        cat worker.xml | java -jar $jar -s http://localhost -auth admin:$pswd create-node node${this.slaveNodeId}
        rm -f worker.xml
   
   removeSlave:
     - cmd[${nodes.cp.master.id}]: |-
        pswd=$(cat ~/.jenkins/secrets/initialAdminPassword)
        jar=${STACK_PATH}/webapps/ROOT/WEB-INF/jenkins-cli.jar
        java -jar $jar -s http://localhost -auth admin:$pswd delete-node node${this.slaveNodeId}

success: /text/success.md
